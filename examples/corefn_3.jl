# [(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 3, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "MyShow") (Abs (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 3, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: (Just IsTypeClassConstructor) }) (Ident "myShow") (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 3, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (ObjectLiteral[(Tuple "myShow" (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 3, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified Nothing (Ident "myShow"))))])))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 6, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 7, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "myShowString") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 6, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 7, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 6, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 7, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: (Just IsTypeClassConstructor) }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "MyShow"))) (Abs (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 6, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 7, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "s") (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 7, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 7, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified Nothing (Ident "s")))))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 13, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "myShowInt") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 13, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 13, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: (Just IsTypeClassConstructor) }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "MyShow"))) (Abs (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 13, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "v") (Case (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 13, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) [(Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 14, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 14, sourcePosColumn: 20 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified Nothing (Ident "v")))] [(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 14, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 14, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 0))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 14, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 14, sourcePosColumn: 20 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "Zero"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 15, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 15, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 1))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 15, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 15, sourcePosColumn: 19 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "One"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 16, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 16, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 2))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 16, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 16, sourcePosColumn: 19 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "Two"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 17, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 17, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 3))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 17, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 17, sourcePosColumn: 21 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "Three"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 18, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 18, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 4))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 18, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 18, sourcePosColumn: 20 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "Four"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 19, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 19, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 5))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 19, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 19, sourcePosColumn: 20 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "Five"))) }),(CaseAlternative { caseAlternativeBinders: [(NullBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 20, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 11 }) }), comments: [], type: Nothing, meta: Nothing }))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 20, sourcePosColumn: 14 }), spanEnd: (SourcePos { sourcePosLine: 20, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "More than five"))) })])))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 9, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "myShowBoolean") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 9, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 9, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: (Just IsTypeClassConstructor) }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "MyShow"))) (Abs (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 9, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "v") (Case (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 9, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: Nothing }) [(Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 10, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 10, sourcePosColumn: 23 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified Nothing (Ident "v")))] [(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 10, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 10, sourcePosColumn: 14 }) }), comments: [], type: Nothing, meta: Nothing }) (BooleanLiteral true))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 10, sourcePosColumn: 17 }), spanEnd: (SourcePos { sourcePosLine: 10, sourcePosColumn: 23 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "true"))) }),(CaseAlternative { caseAlternativeBinders: [(LiteralBinder (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 11, sourcePosColumn: 10 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 15 }) }), comments: [], type: Nothing, meta: Nothing }) (BooleanLiteral false))], caseAlternativeResult: (Right (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 11, sourcePosColumn: 18 }), spanEnd: (SourcePos { sourcePosLine: 11, sourcePosColumn: 25 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "false"))) })])))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 4, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "myShow") (Abs (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 4, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "dict") (Accessor (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 4, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) "myShow" (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 4, sourcePosColumn: 3 }), spanEnd: (SourcePos { sourcePosLine: 4, sourcePosColumn: 24 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified Nothing (Ident "dict")))))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 25, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 25, sourcePosColumn: 29 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "test_bool_instance") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 26, sourcePosColumn: 22 }), spanEnd: (SourcePos { sourcePosLine: 26, sourcePosColumn: 33 }) }), comments: [], type: Nothing, meta: Nothing }) (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 26, sourcePosColumn: 22 }), spanEnd: (SourcePos { sourcePosLine: 26, sourcePosColumn: 33 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 26, sourcePosColumn: 22 }), spanEnd: (SourcePos { sourcePosLine: 26, sourcePosColumn: 28 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShow"))) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }), spanEnd: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShowBoolean")))) (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 26, sourcePosColumn: 29 }), spanEnd: (SourcePos { sourcePosLine: 26, sourcePosColumn: 33 }) }), comments: [], type: Nothing, meta: Nothing }) (BooleanLiteral true)))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 28, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 28, sourcePosColumn: 28 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "test_int_instance") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 29, sourcePosColumn: 21 }), spanEnd: (SourcePos { sourcePosLine: 29, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 29, sourcePosColumn: 21 }), spanEnd: (SourcePos { sourcePosLine: 29, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 29, sourcePosColumn: 21 }), spanEnd: (SourcePos { sourcePosLine: 29, sourcePosColumn: 27 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShow"))) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }), spanEnd: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShowInt")))) (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 29, sourcePosColumn: 28 }), spanEnd: (SourcePos { sourcePosLine: 29, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (NumericLiteral 10)))),(NonRec (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 22, sourcePosColumn: 1 }), spanEnd: (SourcePos { sourcePosLine: 22, sourcePosColumn: 31 }) }), comments: [], type: Nothing, meta: Nothing }) (Ident "test_string_instance") (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 23, sourcePosColumn: 24 }), spanEnd: (SourcePos { sourcePosLine: 23, sourcePosColumn: 47 }) }), comments: [], type: Nothing, meta: Nothing }) (App (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 23, sourcePosColumn: 24 }), spanEnd: (SourcePos { sourcePosLine: 23, sourcePosColumn: 47 }) }), comments: [], type: Nothing, meta: Nothing }) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 23, sourcePosColumn: 24 }), spanEnd: (SourcePos { sourcePosLine: 23, sourcePosColumn: 30 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShow"))) (Var (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }), spanEnd: (SourcePos { sourcePosLine: 0, sourcePosColumn: 0 }) }), comments: [], type: Nothing, meta: Nothing }) (Qualified (Just (ModuleName [(ProperName "Main")])) (Ident "myShowString")))) (Literal (Ann { sourceSpan: (SourceSpan { spanName: "src/Main.purs", spanStart: (SourcePos { sourcePosLine: 23, sourcePosColumn: 31 }), spanEnd: (SourcePos { sourcePosLine: 23, sourcePosColumn: 47 }) }), comments: [], type: Nothing, meta: Nothing }) (StringLiteral "test test test"))))]
# version 0.13.8
# path src/Main.purs
module  Main
# import Main, Prim
export myShow, MyShow, test_string_instance, test_bool_instance, test_int_instance, myShowString, myShowBoolean, myShowInt
MyShow = (myShow -> Dict([("myShow", myShow)]))
myShowString = MyShow((s -> s))
myShowInt = MyShow((v -> 
if v == 0
"Zero"
elseif v == 1
"One"
elseif v == 2
"Two"
elseif v == 3
"Three"
elseif v == 4
"Four"
elseif v == 5
"Five"
else
"More than five"
end))
myShowBoolean = MyShow((v -> 
if v == true
"true"
elseif v == false
"false"
end))
myShow = (dict -> dict["myShow"])
test_bool_instance = myShow(myShowBoolean)(true)
test_int_instance = myShow(myShowInt)(10)
test_string_instance = myShow(myShowString)("test test test")
end